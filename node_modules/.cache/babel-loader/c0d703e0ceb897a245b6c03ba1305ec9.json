{"ast":null,"code":"var _jsxFileName = \"/home/cf/Documentos/nlw/react-app-nlw/src/pages/AdminRoom.js\",\n    _s = $RefreshSig$();\n\nimport { Button } from \"../components/Button\";\nimport '.././styles/room.scss';\nimport logoImg from \"../images/logo.svg\";\nimport { RoomCode } from \"../components/RoomCode\";\nimport { useParams } from 'react-router-dom';\nimport { database } from \"../services/firebase\";\nimport { AuthContext } from '../contexts/AuthContext';\nimport { useContext, useEffect, useState } from 'react';\nimport { Question } from \"../components/Question\";\nimport { useRoom } from \"../hooks/useRoom\";\nimport deleteImg from \"../images/delete.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AdminRoom() {\n  _s();\n\n  const {\n    user\n  } = useContext(AuthContext);\n  const params = useParams();\n  const roomId = params.id;\n  /*const [questions, setQuestions] = useState([])\n  const [title, setTitle] = useState('')\n  \n  \n   useEffect(() => {\n      const roomRef = database.ref(`rooms/${roomId}`);\n      roomRef.on('value', room => {\n          const databaseRoom = room.val()\n          const firebaseQuestions = databaseRoom.questions ?? {}\n  const parsedQuestion = Object.entries(firebaseQuestions).map(([key, value]) => {\n  return {\n      id: key,\n      content: value.content,\n      author: value.author,\n      isHighlighted: value.isHighlighted,\n      isAnswered: value.isAnswered\n  }})\n  \n  setTitle(databaseRoom.title)\n  setQuestions(parsedQuestion)\n  \n      })\n  },[roomId]) */\n\n  const [newQuestion, setNewQuenstion] = useState('');\n  const {\n    title,\n    questions\n  } = useRoom(roomId);\n\n  async function handleDeleteQuestion(questionId) {\n    if (window.confirm('Tem certeza que voce desaja excluir esta pergunta')) {\n      await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(RoomCode, {\n            code: params.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 16\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            isOutlined: true,\n            children: \" Encerrar \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \", questions.length, \" pergunta(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-list\",\n        children: questions.map(question => {\n          return /*#__PURE__*/_jsxDEV(Question, {\n            content: question.content,\n            author: question.author,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => handleDeleteQuestion(question.id),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: deleteImg,\n                alt: \"remover pergunta\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 9\n            }, this)\n          }, question.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 5\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 1\n  }, this);\n}\n\n_s(AdminRoom, \"FEaESC+Grmlox2wEatFoXA79/0o=\", false, function () {\n  return [useParams, useRoom];\n});\n\n_c = AdminRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRoom\");","map":{"version":3,"sources":["/home/cf/Documentos/nlw/react-app-nlw/src/pages/AdminRoom.js"],"names":["Button","RoomCode","useParams","database","AuthContext","useContext","useEffect","useState","Question","useRoom","AdminRoom","user","params","roomId","id","newQuestion","setNewQuenstion","title","questions","handleDeleteQuestion","questionId","window","confirm","ref","remove","logoImg","length","map","question","content","author","deleteImg"],"mappings":"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","sourcesContent":["import { Button } from \"../components/Button\";\nimport '.././styles/room.scss'\nimport logoImg from '../images/logo.svg'\nimport { RoomCode } from \"../components/RoomCode\";\nimport {useParams} from 'react-router-dom'\nimport { database } from \"../services/firebase\";\nimport { AuthContext } from '../contexts/AuthContext'\nimport { useContext, useEffect, useState} from 'react'\nimport { Question } from \"../components/Question\";\nimport { useRoom } from \"../hooks/useRoom\";\nimport deleteImg from '../images/delete.svg'\n\nexport function AdminRoom(){\n    const {user} = useContext(AuthContext)\nconst params = useParams()\nconst roomId = params.id\n/*const [questions, setQuestions] = useState([])\nconst [title, setTitle] = useState('')\n\n\n useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.on('value', room => {\n        const databaseRoom = room.val()\n        const firebaseQuestions = databaseRoom.questions ?? {}\nconst parsedQuestion = Object.entries(firebaseQuestions).map(([key, value]) => {\nreturn {\n    id: key,\n    content: value.content,\n    author: value.author,\n    isHighlighted: value.isHighlighted,\n    isAnswered: value.isAnswered\n}})\n\nsetTitle(databaseRoom.title)\nsetQuestions(parsedQuestion)\n\n    })\n},[roomId]) */\n\nconst [newQuestion, setNewQuenstion] = useState('')\n const{title, questions} = useRoom(roomId)\n\nasync function handleDeleteQuestion(questionId){\nif(window.confirm('Tem certeza que voce desaja excluir esta pergunta')){\nawait database.ref(`rooms/${roomId}/questions/${questionId}`).remove()\n}\n }\n\n    return (\n<div id='page-room'>\n\n    <header>\n\n        <div className='content'>\n            <img src={logoImg} alt='letmeask'/>\n          <div>\n               <RoomCode code={params.id}></RoomCode>\n           <Button isOutlined={true} > Encerrar </Button>\n           </div>\n        </div>\n    </header>\n<main >\n    <div className='room-title' >\n        <h1>Sala {title}</h1>\n        {questions.length > 0 && <span> {questions.length} pergunta(s)</span>}\n    </div>\n    \n<div className='question-list'>\n    {questions.map(question=>{\nreturn (\n    <Question\n     key={question.id}\n      content={question.content}\n        author={question.author}\n        > \n        <button\n        type='button'\n        onClick={() => handleDeleteQuestion(question.id)}\n        >\n            <img src={deleteImg} alt='remover pergunta'/>\n        </button>\n        </Question>\n)\n    })} \n</div>\n</main>\n\n\n</div>\n        )\n}"]},"metadata":{},"sourceType":"module"}