{"ast":null,"code":"var _jsxFileName = \"/home/cf/Documentos/nlw/letmeask/src/contexts/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { auth, firebase } from \"../services/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(props) {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName) {\n          throw new Error('Missin information from Google Account.');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  async function singInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName) {\n        throw new Error('Missin information from Google Account.');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoUrl\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      singInWithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"qe8ATqlJZgCfqMFVj3Q4TN23kL8=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/cf/Documentos/nlw/letmeask/src/contexts/AuthContext.js"],"names":["createContext","useEffect","useState","auth","firebase","AuthContext","AuthContextProvider","props","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","singInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","photoUrl","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,IAAT,EAAeC,QAAf,QAA8B,sBAA9B;;AAGA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAKP,OAAO,SAASM,mBAAT,CAA6BC,KAA7B,EAAmC;AAAA;;AAEtC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAmBP,QAAQ,EAAjC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,WAAW,GAAGP,IAAI,CAACQ,kBAAL,CAAwBH,IAAI,IAAI;AAClD,UAAGA,IAAH,EAAQ;AACN,cAAM;AAACI,UAAAA,WAAD;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAgCN,IAAtC;;AACA,YAAG,CAACI,WAAJ,EAAgB;AACd,gBAAM,IAAIG,KAAJ,CAAW,yCAAX,CAAN;AACD;;AACHN,QAAAA,OAAO,CAAC;AACNO,UAAAA,EAAE,EAACF,GADG;AAENG,UAAAA,IAAI,EAACL,WAFC;AAGNM,UAAAA,MAAM,EAACL;AAHD,SAAD,CAAP;AAKC;AACF,KAZmB,CAApB;AAcF,WAAO,MAAM;AACXH,MAAAA,WAAW;AACZ,KAFD;AAIC,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBC,iBAAeS,gBAAf,GAAiC;AAC9B,UAAMC,QAAQ,GAAG,IAAIhB,QAAQ,CAACD,IAAT,CAAckB,kBAAlB,EAAjB;AACA,UAAMC,MAAM,GAAG,MAAMnB,IAAI,CAACoB,eAAL,CAAqBH,QAArB,CAArB;;AACJ,QAAGE,MAAM,CAACd,IAAV,EAAgB;AACd,YAAM;AAACI,QAAAA,WAAD;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAgCQ,MAAM,CAACd,IAA7C;;AACA,UAAG,CAACI,WAAJ,EAAgB;AACd,cAAM,IAAIG,KAAJ,CAAW,yCAAX,CAAN;AACD;;AACHN,MAAAA,OAAO,CAAC;AACNO,QAAAA,EAAE,EAACF,GADG;AAENG,QAAAA,IAAI,EAACL,WAFC;AAGNM,QAAAA,MAAM,EAACM;AAHD,OAAD,CAAP;AAQC;AACI;;AAGL,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEhB,MAAAA,IAAF;AAAOW,MAAAA;AAAP,KAA7B;AAAA,cACKZ,KAAK,CAACkB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAlDenB,mB;;KAAAA,mB","sourcesContent":["import { createContext, useEffect, useState } from \"react\"\nimport { auth ,firebase} from \"../services/firebase\"\n\n\nexport const AuthContext = createContext({})\n\n\n\n\nexport function AuthContextProvider(props){\n\n    const [user, setUser ] = useState()\n    useEffect(() => {\n      const unsubscribe = auth.onAuthStateChanged(user => {\n        if(user){\n          const {displayName , photoURL, uid} = user\n          if(!displayName){\n            throw new Error ('Missin information from Google Account.')\n          }\n        setUser({\n          id:uid,\n          name:displayName,\n          avatar:photoURL\n        })\n        }\n      })\n    \n    return () => {\n      unsubscribe()\n    }\n    \n    }, [])\n    \n     async function singInWithGoogle(){\n        const provider = new firebase.auth.GoogleAuthProvider()\n        const result = await auth.signInWithPopup(provider)\n    if(result.user) {\n      const {displayName , photoURL, uid} = result.user\n      if(!displayName){\n        throw new Error ('Missin information from Google Account.')\n      }\n    setUser({\n      id:uid,\n      name:displayName,\n      avatar:photoUrl\n    })\n    \n    \n    \n    }\n        }\n    \n\n    return(\n        <AuthContext.Provider value={{ user,singInWithGoogle}}>\n            {props.children}\n</AuthContext.Provider>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}