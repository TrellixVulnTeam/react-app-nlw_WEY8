{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react';\nimport { AuthContext } from '../contexts/AuthContext';\nimport { database } from '../services/firebase';\nexport function useRoom(roomId) {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState('');\n  const {\n    user\n  } = useContext(AuthContext);\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.on('value', room => {\n      var _databaseRoom$questio;\n\n      const databaseRoom = room.val();\n      const firebaseQuestions = (_databaseRoom$questio = databaseRoom.questions) !== null && _databaseRoom$questio !== void 0 ? _databaseRoom$questio : {};\n      const parsedQuestion = Object.entries(firebaseQuestions).map(([key, value]) => {\n        var _value$likes, _value$likes2;\n\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighlighted: value.isHighlighted,\n          isAnswered: value.isAnswered,\n          likeCount: Object.values((_value$likes = value.likes) !== null && _value$likes !== void 0 ? _value$likes : {}).length,\n          hasLiked: Object.values((_value$likes2 = value.likes) !== null && _value$likes2 !== void 0 ? _value$likes2 : {}).some(like => like.authorId === user.id)\n        };\n      });\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestion);\n    });\n  }, [roomId]);\n  return {\n    questions,\n    title\n  };\n}\n\n_s(useRoom, \"RuYydhPrKn2nRL1A4bW9Ste0f5c=\");","map":{"version":3,"sources":["/home/cf/Documentos/nlw/react-app-nlw/src/hooks/useRoom.js"],"names":["useContext","useEffect","useState","AuthContext","database","useRoom","roomId","questions","setQuestions","title","setTitle","user","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestion","Object","entries","map","key","value","id","content","author","isHighlighted","isAnswered","likeCount","values","likes","length","hasLiked","some","like","authorId"],"mappings":";;AACA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AAEA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAwB;AAAA;;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAES,IAAAA;AAAF,MAAWX,UAAU,CAACG,WAAD,CAA3B;AAGAF,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,OAAO,GAAGR,QAAQ,CAACS,GAAT,CAAc,SAAQP,MAAO,EAA7B,CAAhB;AACAM,IAAAA,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoBC,IAAI,IAAI;AAAA;;AACxB,YAAMC,YAAY,GAAGD,IAAI,CAACE,GAAL,EAArB;AACA,YAAMC,iBAAiB,4BAAGF,YAAY,CAACT,SAAhB,yEAA6B,EAApD;AACR,YAAMY,cAAc,GAAGC,MAAM,CAACC,OAAP,CAAeH,iBAAf,EAAkCI,GAAlC,CAAsC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAAA;;AAC/E,eAAO;AACHC,UAAAA,EAAE,EAAEF,GADD;AAEHG,UAAAA,OAAO,EAAEF,KAAK,CAACE,OAFZ;AAGHC,UAAAA,MAAM,EAAEH,KAAK,CAACG,MAHX;AAIHC,UAAAA,aAAa,EAAEJ,KAAK,CAACI,aAJlB;AAKHC,UAAAA,UAAU,EAAEL,KAAK,CAACK,UALf;AAMHC,UAAAA,SAAS,EAAEV,MAAM,CAACW,MAAP,iBAAcP,KAAK,CAACQ,KAApB,uDAA6B,EAA7B,EAAiCC,MANzC;AAOHC,UAAAA,QAAQ,EAAEd,MAAM,CAACW,MAAP,kBAAcP,KAAK,CAACQ,KAApB,yDAA6B,EAA7B,EAAiCG,IAAjC,CAAsCC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkB1B,IAAI,CAACc,EAArE;AAPP,SAAP;AAQE,OATqB,CAAvB;AAWAf,MAAAA,QAAQ,CAACM,YAAY,CAACP,KAAd,CAAR;AACAD,MAAAA,YAAY,CAACW,cAAD,CAAZ;AAEK,KAjBD;AAkBH,GApBQ,EAoBP,CAACb,MAAD,CApBO,CAAT;AAsBA,SAAM;AAACC,IAAAA,SAAD;AAAWE,IAAAA;AAAX,GAAN;AACC;;GA7BeJ,O","sourcesContent":["\nimport { useContext, useEffect, useState} from 'react'\nimport { AuthContext } from '../contexts/AuthContext'\nimport {database} from '../services/firebase'\n\nexport function useRoom(roomId){\nconst [questions, setQuestions] = useState([])\nconst [title, setTitle] = useState('')\nconst { user } = useContext(AuthContext)\n\n\nuseEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.on('value', room => {\n        const databaseRoom = room.val()\n        const firebaseQuestions = databaseRoom.questions ?? {}\nconst parsedQuestion = Object.entries(firebaseQuestions).map(([key, value]) => {\nreturn {\n    id: key,\n    content: value.content,\n    author: value.author,\n    isHighlighted: value.isHighlighted,\n    isAnswered: value.isAnswered,\n    likeCount: Object.values(value.likes ?? {}).length,\n    hasLiked: Object.values(value.likes ?? {}).some(like => like.authorId === user.id)\n}})\n\nsetTitle(databaseRoom.title)\nsetQuestions(parsedQuestion)\n\n    })\n},[roomId])\n\nreturn{questions,title}\n}"]},"metadata":{},"sourceType":"module"}